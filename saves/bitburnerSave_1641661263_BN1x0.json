{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":209,\"hp\":15,\"max_hp\":15,\"strength\":51,\"defense\":50,\"dexterity\":52,\"agility\":52,\"charisma\":45,\"intelligence\":0,\"hacking_chance_mult\":1.0510100501,\"hacking_speed_mult\":1.0510100501,\"hacking_money_mult\":1.0510100501,\"hacking_grow_mult\":1.0510100501,\"hacking_exp\":195317.97568203657,\"strength_exp\":1868.0442428463068,\"defense_exp\":1777.6573785377213,\"dexterity_exp\":1788.1674790387212,\"agility_exp\":1788.1674790387212,\"charisma_exp\":1457.1203334586326,\"intelligence_exp\":0,\"hacking_mult\":1.103560552605,\"strength_mult\":1.0510100501,\"defense_mult\":1.0510100501,\"dexterity_mult\":1.103560552605,\"agility_mult\":1.103560552605,\"charisma_mult\":1.0510100501,\"hacking_exp_mult\":1.0510100501,\"strength_exp_mult\":1.0510100501,\"defense_exp_mult\":1.0510100501,\"dexterity_exp_mult\":1.0510100501,\"agility_exp_mult\":1.0510100501,\"charisma_exp_mult\":1.0510100501,\"company_rep_mult\":1.0510100501,\"faction_rep_mult\":1.0510100501,\"money\":-781642433.2708362,\"city\":\"Aevum\",\"location\":\"Aevum Police Headquarters\",\"jobs\":{\"Alpha Enterprises\":\"Software Engineering Intern\",\"Aevum Police Headquarters\":\"Software Engineering Intern\"},\"companyName\":\"Aevum Police Headquarters\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-0-0\",\"pserv-1-0\",\"pserv-2-0\",\"pserv-3-0\",\"pserv-4-0\",\"pserv-5-0\",\"pserv-0-1\",\"pserv-1-1\",\"pserv-2-1\",\"pserv-3-1\",\"pserv-4-1\",\"pserv-5-1\",\"pserv-6-0\",\"pserv-7-0\",\"pserv-8\",\"pserv-9\",\"pserv-10\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":174,\"moneyGainRatePerSecond\":274.3136230761,\"onlineTimeSeconds\":168093.2000007175,\"ram\":1,\"totalMoneyGenerated\":28558259.69756018,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":74,\"moneyGainRatePerSecond\":116.6621155611,\"onlineTimeSeconds\":168092.6000007175,\"ram\":1,\"totalMoneyGenerated\":15058631.736887038,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":53,\"moneyGainRatePerSecond\":83.55529898294999,\"onlineTimeSeconds\":168092.20000071748,\"ram\":1,\"totalMoneyGenerated\":13502631.53714532,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":51,\"moneyGainRatePerSecond\":80.40226883265,\"onlineTimeSeconds\":168091.80000071749,\"ram\":1,\"totalMoneyGenerated\":13496782.03561845,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":78.8257537575,\"onlineTimeSeconds\":168091.4000007175,\"ram\":1,\"totalMoneyGenerated\":13244568.63149735,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":78.8257537575,\"onlineTimeSeconds\":168090.80000071749,\"ram\":1,\"totalMoneyGenerated\":13244456.068320984,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":78.8257537575,\"onlineTimeSeconds\":168090.0000007175,\"ram\":1,\"totalMoneyGenerated\":13244376.611961195,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":52,\"moneyGainRatePerSecond\":81.9787839078,\"onlineTimeSeconds\":168089.60000071747,\"ram\":1,\"totalMoneyGenerated\":13748721.756722502,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":78.8257537575,\"onlineTimeSeconds\":168089.20000071748,\"ram\":1,\"totalMoneyGenerated\":13243593.083968846,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":78.8257537575,\"onlineTimeSeconds\":168088.60000071747,\"ram\":1,\"totalMoneyGenerated\":13244508.093318464,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":78.8257537575,\"onlineTimeSeconds\":168085.60000071747,\"ram\":1,\"totalMoneyGenerated\":13244427.0604436,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":51,\"moneyGainRatePerSecond\":83.21634824179274,\"onlineTimeSeconds\":168085.20000071748,\"ram\":2,\"totalMoneyGenerated\":13968881.224664433,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.57651507515,\"onlineTimeSeconds\":159958.20000069326,\"ram\":1,\"totalMoneyGenerated\":252176.51369372456,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.57651507515,\"onlineTimeSeconds\":1824.8000000002778,\"ram\":1,\"totalMoneyGenerated\":2876.824709134048,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.57651507515,\"onlineTimeSeconds\":1824.2000000002777,\"ram\":1,\"totalMoneyGenerated\":2875.8788000889576,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.57651507515,\"onlineTimeSeconds\":1823.8000000002776,\"ram\":1,\"totalMoneyGenerated\":2875.2481940588973,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.57651507515,\"onlineTimeSeconds\":1823.4000000002775,\"ram\":1,\"totalMoneyGenerated\":2874.617588028837,\"name\":\"hacknet-node-16\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"CyberSec\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"}],\"augmentations\":[{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"}],\"sourceFiles\":[],\"numPeopleKilled\":1,\"karma\":-3.75,\"crime_money_mult\":1.0510100501,\"crime_success_mult\":1.0510100501,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":3000,\"work_money_mult\":1.0510100501,\"hacknet_node_money_mult\":1.0510100501,\"hacknet_node_purchase_cost_mult\":0.9509900498999999,\"hacknet_node_ram_cost_mult\":0.9509900498999999,\"hacknet_node_core_cost_mult\":0.9509900498999999,\"hacknet_node_level_cost_mult\":0.9509900498999999,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641661337311,\"totalPlaytime\":598102000,\"playtimeSinceLastAug\":243294800,\"playtimeSinceLastBitnode\":598102000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-783189000,\"class\":-490976,\"codingcontract\":0,\"corporation\":0,\"crime\":211253.0200701,\"gang\":0,\"hacking\":196624162.87861297,\"hacknet\":178063516.6223425,\"hacknet_expenses\":-50866477.6902855,\"hospitalization\":-509953.129573834,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-781643433.2708362,\"work\":0,\"servers\":-42861958.97004852,\"other\":-39100000,\"augmentations\":-239524000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-783189000,\"class\":-9363344,\"codingcontract\":0,\"corporation\":0,\"crime\":339071.08007009997,\"gang\":0,\"hacking\":225646620.38930628,\"hacknet\":200972181.9664736,\"hacknet_expenses\":-51496740.51797507,\"hospitalization\":-509953.129573834,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-781458726.6045176,\"work\":7480856.627999965,\"servers\":-57145391.885811724,\"other\":-39900000,\"augmentations\":-274293027.1332}},\"scriptProdSinceLastAug\":23274335,\"exploits\":[],\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"92.6.7.1\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var cracks = {\\r\\n  brutessh: false,\\r\\n  ftpcrack: false,\\r\\n  httpworm: false,\\r\\n  relaysmtp: false,\\r\\n  sqlinject: false,\\r\\n};\\r\\nvar ns;\\r\\nvar maxports = 0;\\r\\n\\r\\nconst lse = \\\"           \\\";\\r\\n\\r\\n/**\\r\\n * Bitburner entrypoint to Master script\\r\\n *\\r\\n * @param {ns} nse changing ns scope\\r\\n */\\r\\nexport async function main(nse) {\\r\\n  ns = nse;\\r\\n  mainFunction();\\r\\n}\\r\\n\\r\\n/**\\r\\n * Kicks off the Master script\\r\\n */\\r\\nfunction mainFunction() {\\r\\n  checkPortOpeningTools();\\r\\n  ns.tprint(lse + \\\"Generating Tree!\\\");\\r\\n  let tree = buildTree(ns.getHostname(), {});\\r\\n\\r\\n  ns.tprint(lse + \\\"Nuking Tree!\\\");\\r\\n  nukeTree(tree);\\r\\n\\r\\n  Object.keys(tree).forEach((node) => {\\r\\n    let servHxLvl = ns.getServerRequiredHackingLevel(node);\\r\\n    let hxLvl = ns.getHackingLevel();\\r\\n\\r\\n    if (\\r\\n      servHxLvl < hxLvl &&\\r\\n      ns.hasRootAccess(node) &&\\r\\n      node != ns.getHostname() &&\\r\\n      node != \\\"CSEC\\\"\\r\\n    ) {\\r\\n      //ns.exec(\\\"js/hackloop.js\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\r\\n    }\\r\\n  });\\r\\n}\\r\\n\\r\\n/**\\r\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\r\\n *\\r\\n * @param {String} home the root of the tree scan\\r\\n */\\r\\nfunction buildTree(home, baseTree) {\\r\\n  let tree = baseTree;\\r\\n  let res = ns.scan(home);\\r\\n  for (const node of res) {\\r\\n    if (tree[node] != true) {\\r\\n      basicprint(node, ns.hasRootAccess(node));\\r\\n      //add the node to the tree\\r\\n      tree[node] = true;\\r\\n      tree = buildTree(node, tree);\\r\\n    }\\r\\n  }\\r\\n  return tree;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Simply prints basic info about a node to the terminal.\\r\\n * - 1[X] - Node\\r\\n *\\r\\n * @param {String} node the name of the node to be analyzed\\r\\n * @param {Boolean} bool if the node should be printed\\r\\n */\\r\\nfunction basicprint(node, bool) {\\r\\n  let mark = ns.hasRootAccess(node)\\r\\n    ? ns.getServerNumPortsRequired(node) > maxports - 1\\r\\n      ? \\\"X\\\"\\r\\n      : \\\"o\\\"\\r\\n    : \\\" \\\";\\r\\n  if (bool) {\\r\\n    ns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Runs NUKE.exe on all nodes within the tree.\\r\\n *\\r\\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\r\\n */\\r\\nfunction nukeTree(nodes) {\\r\\n  Object.keys(nodes).forEach((key) => {\\r\\n    nukeNode(key);\\r\\n  });\\r\\n}\\r\\n\\r\\n/**\\r\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\r\\n *\\r\\n * @param {String} node name of node to be nuked\\r\\n */\\r\\nfunction nukeNode(node) {\\r\\n  //ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\r\\n  if (!ns.hasRootAccess(node)) {\\r\\n    if (ns.getServerNumPortsRequired(node) <= maxports) {\\r\\n      ns.tprint(\\\"Nuking Node: \\\" + node);\\r\\n\\r\\n      let servHxLvl = ns.getServerRequiredHackingLevel(node);\\r\\n      let hxLvl = ns.getHackingLevel();\\r\\n\\r\\n      ns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl);\\r\\n      if (servHxLvl < hxLvl) {\\r\\n        runCrackSuite(node);\\r\\n        ns.nuke(node);\\r\\n\\r\\n        if (!ns.hasRootAccess(node)) {\\r\\n          ns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\r\\n        } else ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\r\\n      } else\\r\\n        ns.tprint(\\r\\n          \\\"You do not meet the minimum hacking level requirement for \\\" + node\\r\\n        );\\r\\n    } else {\\r\\n      //ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Runs the available hacking tools on a provided node in the network.\\r\\n * @param {String} node the name of the node to crack\\r\\n */\\r\\nfunction runCrackSuite(node) {\\r\\n  Object.keys(cracks).forEach((crack) => {\\r\\n    if (cracks[crack] == true) ns.run(crack + \\\".exe\\\", node);\\r\\n  });\\r\\n}\\r\\n\\r\\n/**\\r\\n * Checks for hacking tools on the local machine.\\r\\n * @returns the maximum number of ports for a server to be crackable\\r\\n */\\r\\nfunction checkPortOpeningTools() {\\r\\n  ns.tprint(lse + \\\"Checking for hacking tools!\\\");\\r\\n\\r\\n  let maxports = 0;\\r\\n  Object.keys(cracks).forEach((crack) => {\\r\\n    if (ns.fileExists(crack + \\\".exe\\\", \\\"home\\\")) {\\r\\n      cracks[crack] = true;\\r\\n      maxports++;\\r\\n    }\\r\\n  });\\r\\n\\r\\n  ns.tprint(maxports + \\\" tools found!\\\");\\r\\n  return maxports;\\r\\n}\",\"filename\":\"/js/master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/master.js\",\"url\":\"blob:file:///4191d0ef-3635-4768-8789-127a1eacd5eb\"}],\"ramUsage\":3.3,\"server\":\"home\",\"_hash\":\"2182ff9c03743b978811599d0a3ce53a88d5e0f7a60da96c8c8b833db81a8215\",\"moduleSequenceNumber\":59,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait(f1());\\n}\\n\\nfunction resolveAfter2Seconds(x) {\\n  return new Promise(resolve => {\\n    setTimeout(() => {\\n      resolve(x);\\n    }, 2000);\\n  });\\n}\\n\\nasync function f1() {\\n  var x = await resolveAfter2Seconds(10);\\n  ns.toast(x); // 10\\n}\",\"filename\":\"/js/slave.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"slave.js\",\"url\":\"blob:file:///42c512b0-e7c6-417f-be99-01931c10fbdb\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"10ae8e8b0a43549882d047e73f4c88d4d5b9fc57d070798b1c6f50e609460ac6\",\"moduleSequenceNumber\":60}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * A basic hacking loop.\\r\\n * @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  var target = ns.args[0];\\r\\n  var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n  var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n  while (true) {\\r\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n      ns.weaken(target);\\r\\n      ns.toast(\\\"Weakened \\\" + target, \\\"info\\\");\\r\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n      ns.grow(target);\\r\\n      ns.toast(\\\"Grew \\\" + target, \\\"info\\\");\\r\\n    } else {\\r\\n      try {\\r\\n        let target = await ns.hack(target);\\r\\n        ns.toast(\\\"Hacked \\\" + target);\\r\\n      } catch (error) {\\r\\n        ns.toast(\\\"Failed to hack \\\" + target, \\\"error\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/js/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hx.js\",\"url\":\"blob:file:///20b58cc0-7dda-4e06-992b-70fcc90cb499\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"880f35d3a3f207b37533807cf55b0498af67f84dec016c37482fd198d35efc34\",\"moduleSequenceNumber\":61,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"i = 0;\\r\\ncost = 55000;\\r\\ntargetgb = 32;\\r\\n\\r\\ntprint(\\\"Target sever (\\\" + targetgb + \\\"GB) cost: $\\\" + (targetgb*cost)/1000000 + \\\"m\\\")\\r\\n\\r\\nwhile(i < 25) {\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > cost * targetgb) {\\r\\n        hostname = purchaseServer(\\\"pserv-\\\" + i, targetgb);\\r\\n        scp(\\\"master.js\\\", hostname);\\r\\n        scp(\\\"hx.script\\\", hostname)\\r\\n        exec(\\\"master.js\\\", hostname);\\r\\n        ++i;\\r\\n    }\\r\\n}\",\"filename\":\"/script/buyservers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.85,\"server\":\"home\",\"_hash\":\"5d4a158aa743f219dc03c54dec7ebf3fef87c90cfd8aa7fce74d22ee8c430db5\",\"moduleSequenceNumber\":62,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n  //Testing ES2020 features - https://www.freecodecamp.org/news/javascript-new-features-es2020/\\r\\n\\r\\n  //BIGINT\\r\\n  let oldnum = Number.MAX_SAFE_INTEGER;\\r\\n\\r\\n  ns.tprint(\\\"OLD\\\");\\r\\n\\r\\n  ns.tprint(oldnum);\\r\\n  ++oldnum;\\r\\n  ns.tprint(oldnum);\\r\\n  ++oldnum;\\r\\n  ns.tprint(oldnum);\\r\\n  ++oldnum;\\r\\n  ns.tprint(oldnum);\\r\\n\\r\\n  ns.tprint(\\\"NEW\\\");\\r\\n  let newnum = 9007199254740992n;\\r\\n  ns.tprint(newnum);\\r\\n  ++newnum;\\r\\n  ns.tprint(newnum);\\r\\n  ++newnum;\\r\\n  ns.tprint(newnum);\\r\\n  ++newnum;\\r\\n  ns.tprint(newnum);\\r\\n  ++newnum;\\r\\n  ns.tprint(newnum);\\r\\n\\r\\n  //Nullish coalescing\\r\\n  ns.tprint(false ?? \\\"strings are truthy, right?\\\"); //false\\r\\n  ns.tprint(undefined ?? \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(null ?? \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(NaN ?? \\\"strings are truthy, right?\\\"); //NaN\\r\\n\\r\\n  ns.tprint(false || \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(undefined || \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(null || \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(NaN || \\\"strings are truthy, right?\\\");\\r\\n}\",\"filename\":\"/js/deprecated/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/deprecated/test.js\",\"url\":\"blob:file:///17f6accc-96ee-4dcb-a324-5a8a93c9cd9e\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"becfacc1f7dc028111e59e2b519c24baaf934a74955efbb1cc385481b417aa9f\",\"moduleSequenceNumber\":63,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(getHostname() + \\\": Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(getHostname() + \\\": Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(getHostname() + \\\": Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"/script/hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"home\",\"_hash\":\"630ec48959dab7a84a155cb8ea032f29d9b0d6441df7c493b19fa4a4a9e4efbe\",\"moduleSequenceNumber\":64,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Unlocks any Bitburner achievment within Steam.\\r\\n *\\r\\n * @param {NS} ns netscript stuff\\r\\n * @param {String} achievment the name of the achievement to unlock\\r\\n */\\r\\nexport async function main(ns, achievment) {\\r\\n  document.achievements.push(achievement);\\r\\n}\",\"filename\":\"/js/deprecated/achievements.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.6,\"server\":\"home\",\"_hash\":\"f85c04eb6e92a98580a74152d32ec0a3418be0a8e0c125854033c0222f552555\",\"moduleSequenceNumber\":65,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Bitburner entrypoint\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n  testBigInt(ns);\\r\\n  testNullishCoalescing(ns);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Test for new BigInt functionality present in ES2020\\r\\n * @param {NS} ns\\r\\n */\\r\\nfunction testBigInt(ns) {\\r\\n  let oldnum = Number.MAX_SAFE_INTEGER;\\r\\n  ns.tprint(\\\"Old Max: \\\" + oldnum);\\r\\n\\r\\n  ns.tprint(\\\"Adding 999 to standard Max Safe Integer\\\");\\r\\n  oldnum = oldnum + 999;\\r\\n  ns.tprint(oldnum);\\r\\n\\r\\n  ns.tprint(\\\"Adding 999 to standard BigInt\\\");\\r\\n  let newnum = 9007199254740992n;\\r\\n  newnum = newnum + 999;\\r\\n  ns.tprint(newnum);\\r\\n\\r\\n  ns.tprint(\\\"Does it work?: \\\" + newnum > oldnum);\\r\\n  ns.tprint(\\\"\\\");\\r\\n}\\r\\n\\r\\nfunction testNullishCoalescing(ns) {\\r\\n  //Nullish coalescing\\r\\n  ns.tprint(false ?? \\\"strings are truthy, right?\\\"); //false\\r\\n  ns.tprint(undefined ?? \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(null ?? \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(NaN ?? \\\"strings are truthy, right?\\\"); //NaN\\r\\n\\r\\n  ns.tprint(false || \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(undefined || \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(null || \\\"strings are truthy, right?\\\");\\r\\n  ns.tprint(NaN || \\\"strings are truthy, right?\\\");\\r\\n}\",\"filename\":\"/js/deprecated/es2020_features.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/deprecated/es2020_features.js\",\"url\":\"blob:file:///6e670534-4270-4b11-b5c9-f6349489168d\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"244fa730dff530fae28aad30ef3c59d8dfa118735c34cea581ff13e1ae32065b\",\"moduleSequenceNumber\":66,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Find All Valid Math Expressions\\r\\nYou are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\r\\n\\r\\n\\r\\nYou are given the following string which contains only digits between 0 and 9:\\r\\n\\r\\n4066935291\\r\\n\\r\\nYou are also given a target number of -3. Return all possible ways you can add the +, -, and * operators to the string such that it evaluates to the target number.\\r\\n\\r\\nThe provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\r\\n\\r\\n[\\\"4066935291\\\", -3]\\r\\n\\r\\nNOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\r\\n\\r\\nInput: digits = \\\"123\\\", target = 6\\r\\nOutput: [1+2+3, 1*2*3]\\r\\n\\r\\nInput: digits = \\\"105\\\", target = 5\\r\\nOutput: [1*0+5, 10-5]\\r\\n */\",\"filename\":\"/contracts/n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"b308c57658a565f11a45121ab41ad61f652326b17998c3e95738298c808f24b2\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n   Find All Valid Math Expressions\\r\\n   You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\r\\n   \\r\\n   \\r\\n   You are given the following string which contains only digits between 0 and 9:\\r\\n   \\r\\n   4066935291\\r\\n   \\r\\n   You are also given a target number of -3. Return all possible ways you can add the +, -, and * operators to the string such that it evaluates to the target number.\\r\\n   \\r\\n   The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\r\\n   \\r\\n   [\\\"4066935291\\\", -3]\\r\\n   \\r\\n   NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\r\\n   \\r\\n   Input: digits = \\\"123\\\", target = 6\\r\\n   Output: [1+2+3, 1*2*3]\\r\\n   \\r\\n   Input: digits = \\\"105\\\", target = 5\\r\\n   Output: [1*0+5, 10-5]\\r\\n    */\\r\\n\\r\\n/**\\r\\n * Entrypoint for Bitburner.\\r\\n *\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n  let input = ns.args[0] ?? \\\"4066935291\\\";\\r\\n  let target = ns.args[1] ?? -3;\\r\\n\\r\\n  ns.tprint(\\\"Input: \\\" + input + \\\" | Target: \\\" + target);\\r\\n}\",\"filename\":\"/contracts/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/n00dles.js\",\"url\":\"blob:file:///0f85182e-9a26-46a6-8d0c-d40047e96f83\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e96a73783d2b7b9abd022e1a8c79d5e926b58aa2849b050623d535d2530a0967\",\"moduleSequenceNumber\":1357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/js/upgrade_hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"moduleSequenceNumber\":1482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-0-0\",\"pserv-1-0\",\"pserv-2-0\",\"pserv-3-0\",\"pserv-4-0\",\"pserv-5-0\",\"pserv-0-1\",\"pserv-1-1\",\"pserv-2-1\",\"pserv-3-1\",\"pserv-4-1\",\"pserv-5-1\",\"pserv-6-0\",\"pserv-7-0\",\"pserv-8\",\"pserv-9\",\"pserv-10\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"18.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52144950024,\"moneyMax\":1303623750600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1358,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"56.7.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48440162040,\"moneyMax\":1211004051000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1184,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"83.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":17790618322,\"moneyMax\":444765458050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":79}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"52.7.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":27360368713,\"moneyMax\":684009217825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1152,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"83.6.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31949124238,\"moneyMax\":798728105950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":967,\"serverGrowth\":85}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181303.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1007021093\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"23.7.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22370821427,\"moneyMax\":559270535675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1090,\"serverGrowth\":69}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41279.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[196,42,41,69,1,166,22,71,73,51,65,135,83,65,121,189,171,75,38,50,138,153,181,78,12,131,185,99,38,11,56,43,37],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"50.3.0.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":17293192056,\"moneyMax\":432329801400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1005,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"16.2.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":21165756259,\"moneyMax\":529143906475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1196,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"54.3.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27546075329,\"moneyMax\":688651883225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1121,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"5.0.5.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1687703899,\"moneyMax\":42192597475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"12.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1239,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"83.1.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1165995901,\"moneyMax\":29149897525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1018,\"serverGrowth\":85}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"12.7.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":894498517,\"moneyMax\":22362462925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":70}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"68.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":765866380,\"moneyMax\":19146659500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":945,\"serverGrowth\":68}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124921-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[185,10,48,101,159,56,91,123,175,98,87,173,20,128,93,143,103,27,171,117,175,110,43,110,67,166,184,89]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-435043.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[1,7],[4,3,6],[5,1,7,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"82.5.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":558508151,\"moneyMax\":13962703775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"57.1.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":717468137,\"moneyMax\":17936703425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":70}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"60.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":911910607,\"moneyMax\":22797765175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"25.1.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1114635222,\"moneyMax\":27865880550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"81.7.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":807262255,\"moneyMax\":20181556375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"30.8.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":696906740,\"moneyMax\":17422668500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"29.2.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":852891170,\"moneyMax\":21322279250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"86.7.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":779493301,\"moneyMax\":19487332525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"13.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1172041052,\"moneyMax\":29301026300,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":919,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"76.8.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":991780613,\"moneyMax\":24794515325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":912,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"3.8.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":953914028,\"moneyMax\":23847850700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"79.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":746440893,\"moneyMax\":18661022325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":796,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"14.5.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":876929887,\"moneyMax\":21923247175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"74.8.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1410546661,\"moneyMax\":35263666525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":64}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"52.0.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1665433694,\"moneyMax\":41635842350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":815,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"24.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1130545715,\"moneyMax\":28263642875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":786,\"serverGrowth\":66}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"5.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1377085093,\"moneyMax\":34427127325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"23.2.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1078119347,\"moneyMax\":26952983675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":816,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"52.5.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":756750899,\"moneyMax\":18918772475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":667,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"56.0.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":568090482,\"moneyMax\":14202262050,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":514,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"48.8.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":690935564,\"moneyMax\":17273389100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":501,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-305766.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":770305157,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-716395.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,1,0,0],[0,1,0,0],[1,0,1,0],[1,1,0,0],[0,0,0,0],[0,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"80.2.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":298675866,\"moneyMax\":7466896650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":448,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"73.7.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":203447609,\"moneyMax\":5086190225,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":408,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"37.8.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":942336506,\"moneyMax\":23558412650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":728,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"57.7.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":322166186,\"moneyMax\":8054154650,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":434,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"11.6.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":454135676,\"moneyMax\":11353391900,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":607,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"26.0.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":477279015,\"moneyMax\":11931975375,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":425,\"serverGrowth\":28}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"16.1.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":176420571,\"moneyMax\":4410514275,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":287,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"93.1.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":228005731,\"moneyMax\":5700143275,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":343,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"80.8.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":420,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"0.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":83436085,\"moneyMax\":2085902125,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":259,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379279-Sector-12.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4066935291\",-3],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"23.4.0.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"hehe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"n00dles\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.945999999999622,\"minDifficulty\":1,\"moneyAvailable\":1609268.7394991175,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-854711-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-9,3,5,-6,10,5,-10,-3,-5,0,1],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"9.2.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.560000000000001,\"minDifficulty\":3,\"moneyAvailable\":854177.779393539,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"94.9.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.464000000000001,\"minDifficulty\":3,\"moneyAvailable\":1437357.0898345164,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"48.9.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.656000000000001,\"minDifficulty\":5,\"moneyAvailable\":1039182.7050494796,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"48.4.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.4,\"minDifficulty\":8,\"moneyAvailable\":7827438.8444056595,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"44.7.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.920000000000001,\"minDifficulty\":7,\"moneyAvailable\":1292556.6298098306,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"62.0.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.544,\"minDifficulty\":8,\"moneyAvailable\":3810037.0101541304,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"5.5.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":29.7,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"64.6.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.472,\"minDifficulty\":5,\"moneyAvailable\":2207733.441081742,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"74.9.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.4,\"minDifficulty\":5,\"moneyAvailable\":3585447.970387024,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"27.6.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.5280000000000005,\"minDifficulty\":7,\"moneyAvailable\":26535238.49042381,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"55.5.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.5280000000000005,\"minDifficulty\":5,\"moneyAvailable\":11565344.331888739,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123656-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-387730.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[83,64,26,109,86,150,41,79,106,101,187,12,10,65,93,87,21,73,190,138,9,112,11,141,59,134]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"70.8.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":25.7,\"minDifficulty\":9,\"moneyAvailable\":68725679,\"moneyMax\":1718141975,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":190,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"73.1.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":56402710,\"moneyMax\":1410067750,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":246,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226930-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,4,4,5,7,1,2,7,7,2,0,8,0,7,0,10,6,0,0,1,5,7,2],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"84.6.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.372000000000005,\"minDifficulty\":10,\"moneyAvailable\":20855172.640265487,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"5.5.0.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":524,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"18.9.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1020,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"87.2.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":752,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"73.9.4.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"45.6.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500488.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,10],[11,14],[14,23],[9,17],[9,16]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"54.6.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":219,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"72.7.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"84.8.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1.2120000000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"19.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"9.4.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"61.1.6.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"78.1.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-0\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":67,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":68,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.096,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"30.0.5.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///7c72250a-632f-4179-a1b9-d00a2ba739c7\"}],\"ramUsage\":3.8,\"server\":\"pserv-1\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":69,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":70,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"66.2.3.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-2\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":71,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-2\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":72,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"47.2.8.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-3\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":73,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-3\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":74,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"55.7.6.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-4\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":75,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-4\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":76,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"97.4.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-5\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":77,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-5\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":78,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"64.3.9.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-6\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":79,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-6\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":80,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"5.3.8.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///fad609ef-a26a-44d9-a70c-3bb76853301c\"}],\"ramUsage\":3.8,\"server\":\"pserv-7\",\"_hash\":\"c55723b052d13a5712b1f3377ef6ed9936632072c91e3af890ff705196af9a2e\",\"moduleSequenceNumber\":81,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-7\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":82,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0-0\",\"httpPortOpen\":false,\"ip\":\"51.6.3.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///062f6a3d-bcca-4377-bf50-94e61c2475df\"}],\"ramUsage\":3.8,\"server\":\"pserv-0-0\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":83,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-0-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":84,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1-0\",\"httpPortOpen\":false,\"ip\":\"14.3.9.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///062f6a3d-bcca-4377-bf50-94e61c2475df\"}],\"ramUsage\":3.8,\"server\":\"pserv-1-0\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-1-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2-0\",\"httpPortOpen\":false,\"ip\":\"50.5.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///062f6a3d-bcca-4377-bf50-94e61c2475df\"}],\"ramUsage\":3.8,\"server\":\"pserv-2-0\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":87,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-2-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":88,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3-0\",\"httpPortOpen\":false,\"ip\":\"66.2.3.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///062f6a3d-bcca-4377-bf50-94e61c2475df\"}],\"ramUsage\":3.8,\"server\":\"pserv-3-0\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":89,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-3-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":90,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4-0\",\"httpPortOpen\":false,\"ip\":\"41.2.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///062f6a3d-bcca-4377-bf50-94e61c2475df\"}],\"ramUsage\":3.8,\"server\":\"pserv-4-0\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":91,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-4-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":92,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5-0\",\"httpPortOpen\":false,\"ip\":\"36.6.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 2, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///062f6a3d-bcca-4377-bf50-94e61c2475df\"}],\"ramUsage\":3.8,\"server\":\"pserv-5-0\",\"_hash\":\"3b4f86ef3a049047d2ffd76bdbee455767a0a9942f00aaa13f0e734dec72cf88\",\"moduleSequenceNumber\":93,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-5-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":94,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0-1\",\"httpPortOpen\":false,\"ip\":\"78.5.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-0-1\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":95,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-0-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":96,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1-1\",\"httpPortOpen\":false,\"ip\":\"89.9.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-1-1\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":97,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-1-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":98,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2-1\",\"httpPortOpen\":false,\"ip\":\"60.1.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-2-1\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":99,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-2-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3-1\",\"httpPortOpen\":false,\"ip\":\"72.4.8.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-3-1\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-3-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4-1\",\"httpPortOpen\":false,\"ip\":\"87.0.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-4-1\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-4-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5-1\",\"httpPortOpen\":false,\"ip\":\"32.8.7.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-5-1\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-5-1\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6-0\",\"httpPortOpen\":false,\"ip\":\"74.5.2.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-6-0\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-6-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7-0\",\"httpPortOpen\":false,\"ip\":\"51.7.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-7-0\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-7-0\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"81.4.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-8\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-8\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"62.2.2.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-9\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-9\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"35.8.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ns;\\nvar maxports = 0;\\nconst lse = \\\"           \\\";\\n\\n/**\\n * @param {ns} nse changing ns scope\\n */\\nexport async function main(nse) {\\n\\tns = nse;\\n\\tmaxports = 0;\\n\\t//while (true) {\\n\\t//\\tns.killall();\\n\\tmainFunction();\\n\\t//\\tawait ns.sleep(43200000);\\n\\t//}\\n}\\n\\nfunction mainFunction() {\\n\\tcheckPortOpeningTools();\\n\\tns.tprint(lse + \\\"Generating Tree!\\\")\\n\\tlet tree = buildTree(ns.getHostname(), {});\\n\\n\\tns.tprint(lse + \\\"Nuking Tree!\\\")\\n\\tnukeTree(tree);\\n\\n\\tObject.keys(tree).forEach(node => {\\n\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\t\\t\\n\\t\\tif (servHxLvl < hxLvl && ns.hasRootAccess(node) && node != ns.getHostname() && node != \\\"CSEC\\\")\\n\\t\\t\\tns.exec(\\\"hx.script\\\", ns.getHostname(), (ns.getServerNumPortsRequired(node) + 1) * 4, node);\\n\\t});\\n}\\n\\n\\n\\n/**\\n * Builds a Tree of connected nodes on the network from a single  entrypoint.\\n * \\n * @param {String} home the root of the tree scan\\n */\\nfunction buildTree(home, baseTree) {\\n\\tvar tree = baseTree;\\n\\tlet res = ns.scan(home)\\n\\tfor (const node of res) {\\n\\t\\tif (tree[node] != \\\"set\\\") {\\n\\n\\t\\t\\t//logic for printing to command line\\n\\t\\t\\tlet mark = ns.hasRootAccess(node) ? ns.getServerNumPortsRequired(node) > maxports - 1 ? \\\"X\\\" : \\\"o\\\" : \\\" \\\";\\n\\t\\t\\tif (ns.hasRootAccess(node)) {\\n\\t\\t\\t\\tns.tprint(ns.getServerNumPortsRequired(node) + \\\"[\\\" + mark + \\\"] - \\\" + node);\\n\\t\\t\\t};\\n\\n\\t\\t\\t//add the node to the tree\\n\\t\\t\\ttree[node] = \\\"set\\\";\\n\\t\\t\\ttree = buildTree(node, tree);\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n}\\n\\n/**\\n * Runs NUKE.exe on all nodes within the tree.\\n * \\n * @param {Object} nodes \\\"tree\\\" of nodes, stored as object key strings, to be nuked\\n */\\nfunction nukeTree(nodes) {\\n\\tObject.keys(nodes).forEach(key => { nukeNode(key); });\\n}\\n\\n/**\\n * Checks if a node is NUKEable, opens the required ports, and then runs NUKE.exe on it.\\n * \\n * @param {String} node name of node to be nuked\\n */\\nfunction nukeNode(node) {\\n\\t//ns.tprint(node + \\\" - \\\" + ns.hasRootAccess);\\n\\tif (!ns.hasRootAccess(node)) {\\n\\t\\tif (ns.getServerNumPortsRequired(node) <= maxports) {\\n\\t\\t\\tns.tprint(\\\"Nuking Node: \\\" + node);\\n\\n\\n\\t\\t\\tlet servHxLvl = ns.getServerRequiredHackingLevel(node);\\n\\t\\t\\tlet hxLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tns.tprint(\\\"Server: \\\" + servHxLvl + \\\"| You: \\\" + hxLvl)\\n\\t\\t\\tif (servHxLvl < hxLvl) {\\n\\t\\t\\t\\trunCrackSuite(node);\\n\\n\\t\\t\\t\\t//ns.nuke(node);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\tns.toast(node + \\\" nuked!\\\", \\\"success\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse ns.toast(node + \\\"not nuked.\\\", \\\"error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse ns.tprint(\\\"You do not meet the minimum hacking level requirement for \\\" + node)\\n\\n\\n\\n\\t\\t} else {\\n\\t\\t\\t//ns.tprint(\\\"Cannot nuke node \\\" + node + \\\" due to port requirements - [\\\" + ns.getServerNumPortsRequired(node) + \\\"]\\\");\\n\\t\\t}\\n\\t}\\n}\\n\\n//TODO by god please turn this into a loop\\nfunction runCrackSuite(node) {\\n\\tlet cracks = {};\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(node);\\n\\t\\tcracks[\\\"brutessh\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(node);\\n\\t\\tcracks[\\\"ftpcrack\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(node);\\n\\t\\tcracks[\\\"httpworm\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(node);\\n\\t\\tcracks[\\\"relaysmtp\\\"] = true;\\n\\t}\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(node);\\n\\t\\tcracks[\\\"sqlinject\\\"] = true;\\n\\t}\\n\\n\\treturn cracks;\\n}\\n//TODO by god please turn this into a loop\\nfunction checkPortOpeningTools() {\\n\\tns.tprint(lse + \\\"Checking for hacking tools!\\\")\\n\\n\\tif (ns.fileExists(\\\"brutessh.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) maxports++;\\n\\tif (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) maxports++;\\n\\tns.tprint(maxports + \\\" tools found!\\\");\\n\\treturn maxports;\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"master.js\",\"url\":\"blob:file:///a1bc09fd-1016-4ebd-bb14-270aeea32c71\"}],\"ramUsage\":3.8,\"server\":\"pserv-10\",\"_hash\":\"af86bab891c1cbbb455b6b9dbd960083971c17988847753b1a5f3a754e1702a8\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.01 //0.05;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 500;\\r\\n\\r\\nwhile (true) {\\r\\n\\tif (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\tweaken(target);\\r\\n\\t\\ttoast(\\\"Weakened \\\" + target, \\\"info\\\")\\r\\n\\t} else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\tgrow(target);\\r\\n\\t\\ttoast(\\\"Grew \\\" + target, \\\"info\\\")\\r\\n\\r\\n\\t} else {\\r\\n\\t\\thack(target);\\r\\n\\t\\t\\ttoast(\\\"Hacked \\\" + target)\\r\\n\\t}\\r\\n}\",\"filename\":\"hx.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-10\",\"_hash\":\"9f1fe7f1de05e5b6458b2ddd5c0a5cdc390fe331e73f4f047b41a3a7f1bbf121\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":21,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":39.7037,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":86315.64222086608}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":39.6647,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":84940.2897563984}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1.5481,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":12.6997,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":75633.43725640365}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run nuke.exe\",\"start\":\"run master.js\",\"master\":\"run js/master.js\",\"ljs\":\"ls js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641649936691","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}